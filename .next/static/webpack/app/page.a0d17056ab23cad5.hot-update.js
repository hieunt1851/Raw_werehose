"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./services/roboflow.ts":
/*!******************************!*\
  !*** ./services/roboflow.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RoboflowService: function() { return /* binding */ RoboflowService; }\n/* harmony export */ });\nconst ROBOFLOW_API_KEY = \"uYUCzsUbWxWRrO15iar5\";\nconst ROBOFLOW_MODEL_URL = \"/proxy-raw-meat/1\";\nclass RoboflowService {\n    static async predictMaterial(imageUrl) {\n        try {\n            const response = await fetch(\"\".concat(ROBOFLOW_MODEL_URL, \"?api_key=\").concat(ROBOFLOW_API_KEY, \"&image=\").concat(encodeURIComponent(imageUrl)), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"Roboflow API error:\", error);\n            return {\n                error: error instanceof Error ? error.message : \"Unknown error occurred\"\n            };\n        }\n    }\n    static async predictMaterialFromBase64(base64Image) {\n        // Helper to convert image URL to base64\n        async function urlToBase64(url) {\n            const response = await fetch(url);\n            const blob = await response.blob();\n            return new Promise((resolve, reject)=>{\n                const reader = new FileReader();\n                reader.onloadend = ()=>{\n                    const result = reader.result;\n                    // Remove data URL prefix\n                    resolve(result.split(\",\")[1]);\n                };\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            });\n        }\n        try {\n            let base64 = base64Image;\n            // If input is a URL, convert to base64\n            if (base64.startsWith(\"http://\") || base64.startsWith(\"https://\")) {\n                base64 = await urlToBase64(base64);\n            } else if (base64.startsWith(\"data:\")) {\n                base64 = base64.split(\",\")[1];\n            }\n            const response = await fetch(\"\".concat(ROBOFLOW_MODEL_URL, \"?api_key=\").concat(ROBOFLOW_API_KEY), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                },\n                body: base64\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error(\"Roboflow API error:\", error);\n            return {\n                error: error instanceof Error ? error.message : \"Unknown error occurred\"\n            };\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NlcnZpY2VzL3JvYm9mbG93LnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxtQkFBbUI7QUFDekIsTUFBTUMscUJBQXFCO0FBa0JwQixNQUFNQztJQUNYLGFBQWFDLGdCQUFnQkMsUUFBZ0IsRUFBK0M7UUFDMUYsSUFBSTtZQUNGLE1BQU1DLFdBQVcsTUFBTUMsTUFBTSxHQUFpQ04sT0FBOUJDLG9CQUFtQixhQUFxQ00sT0FBMUJQLGtCQUFpQixXQUFzQyxPQUE3Qk8sbUJBQW1CSCxZQUFhO2dCQUN0SEksUUFBUTtnQkFDUkMsU0FBUztvQkFDUCxnQkFBZ0I7Z0JBQ2xCO1lBQ0Y7WUFFQSxJQUFJLENBQUNKLFNBQVNLLEVBQUUsRUFBRTtnQkFDaEIsTUFBTSxJQUFJQyxNQUFNLHVCQUF1QyxPQUFoQk4sU0FBU08sTUFBTTtZQUN4RDtZQUVBLE1BQU1DLE9BQU8sTUFBTVIsU0FBU1MsSUFBSTtZQUNoQyxPQUFPRDtRQUNULEVBQUUsT0FBT0UsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsdUJBQXVCQTtZQUNyQyxPQUFPO2dCQUNMQSxPQUFPQSxpQkFBaUJKLFFBQVFJLE1BQU1FLE9BQU8sR0FBRztZQUNsRDtRQUNGO0lBQ0Y7SUFFQSxhQUFhQywwQkFBMEJDLFdBQW1CLEVBQStDO1FBQ3ZHLHdDQUF3QztRQUN4QyxlQUFlQyxZQUFZQyxHQUFXO1lBQ3BDLE1BQU1oQixXQUFXLE1BQU1DLE1BQU1lO1lBQzdCLE1BQU1DLE9BQU8sTUFBTWpCLFNBQVNpQixJQUFJO1lBQ2hDLE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxTQUFTQztnQkFDM0IsTUFBTUMsU0FBUyxJQUFJQztnQkFDbkJELE9BQU9FLFNBQVMsR0FBRztvQkFDakIsTUFBTUMsU0FBU0gsT0FBT0csTUFBTTtvQkFDNUIseUJBQXlCO29CQUN6QkwsUUFBUUssT0FBT0MsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM5QjtnQkFDQUosT0FBT0ssT0FBTyxHQUFHTjtnQkFDakJDLE9BQU9NLGFBQWEsQ0FBQ1Y7WUFDdkI7UUFDRjtRQUVBLElBQUk7WUFDRixJQUFJVyxTQUFTZDtZQUNiLHVDQUF1QztZQUN2QyxJQUFJYyxPQUFPQyxVQUFVLENBQUMsY0FBY0QsT0FBT0MsVUFBVSxDQUFDLGFBQWE7Z0JBQ2pFRCxTQUFTLE1BQU1iLFlBQVlhO1lBQzdCLE9BQU8sSUFBSUEsT0FBT0MsVUFBVSxDQUFDLFVBQVU7Z0JBQ3JDRCxTQUFTQSxPQUFPSCxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0I7WUFDQSxNQUFNekIsV0FBVyxNQUFNQyxNQUFNLEdBQWlDTixPQUE5QkMsb0JBQW1CLGFBQTRCLE9BQWpCRCxtQkFBb0I7Z0JBQ2hGUSxRQUFRO2dCQUNSQyxTQUFTO29CQUNQLGdCQUFnQjtnQkFDbEI7Z0JBQ0EwQixNQUFNRjtZQUNSO1lBRUEsSUFBSSxDQUFDNUIsU0FBU0ssRUFBRSxFQUFFO2dCQUNoQixNQUFNLElBQUlDLE1BQU0sdUJBQXVDLE9BQWhCTixTQUFTTyxNQUFNO1lBQ3hEO1lBRUEsTUFBTUMsT0FBTyxNQUFNUixTQUFTUyxJQUFJO1lBQ2hDLE9BQU9EO1FBQ1QsRUFBRSxPQUFPRSxPQUFPO1lBQ2RDLFFBQVFELEtBQUssQ0FBQyx1QkFBdUJBO1lBQ3JDLE9BQU87Z0JBQ0xBLE9BQU9BLGlCQUFpQkosUUFBUUksTUFBTUUsT0FBTyxHQUFHO1lBQ2xEO1FBQ0Y7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NlcnZpY2VzL3JvYm9mbG93LnRzPzE3MWQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUk9CT0ZMT1dfQVBJX0tFWSA9ICd1WVVDenNVYld4V1JyTzE1aWFyNSc7XG5jb25zdCBST0JPRkxPV19NT0RFTF9VUkwgPSAnL3Byb3h5LXJhdy1tZWF0LzEnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJvYm9mbG93UHJlZGljdGlvbiB7XG4gIHByZWRpY3Rpb25zOiBBcnJheTx7XG4gICAgY2xhc3M6IHN0cmluZztcbiAgICBjb25maWRlbmNlOiBudW1iZXI7XG4gICAgeDogbnVtYmVyO1xuICAgIHk6IG51bWJlcjtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICB9PjtcbiAgdGltZTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvYm9mbG93RXJyb3Ige1xuICBlcnJvcjogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgUm9ib2Zsb3dTZXJ2aWNlIHtcbiAgc3RhdGljIGFzeW5jIHByZWRpY3RNYXRlcmlhbChpbWFnZVVybDogc3RyaW5nKTogUHJvbWlzZTxSb2JvZmxvd1ByZWRpY3Rpb24gfCBSb2JvZmxvd0Vycm9yPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7Uk9CT0ZMT1dfTU9ERUxfVVJMfT9hcGlfa2V5PSR7Uk9CT0ZMT1dfQVBJX0tFWX0maW1hZ2U9JHtlbmNvZGVVUklDb21wb25lbnQoaW1hZ2VVcmwpfWAsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQIGVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1JvYm9mbG93IEFQSSBlcnJvcjonLCBlcnJvcik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvciBvY2N1cnJlZCdcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIHByZWRpY3RNYXRlcmlhbEZyb21CYXNlNjQoYmFzZTY0SW1hZ2U6IHN0cmluZyk6IFByb21pc2U8Um9ib2Zsb3dQcmVkaWN0aW9uIHwgUm9ib2Zsb3dFcnJvcj4ge1xuICAgIC8vIEhlbHBlciB0byBjb252ZXJ0IGltYWdlIFVSTCB0byBiYXNlNjRcbiAgICBhc3luYyBmdW5jdGlvbiB1cmxUb0Jhc2U2NCh1cmw6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XG4gICAgICBjb25zdCBibG9iID0gYXdhaXQgcmVzcG9uc2UuYmxvYigpO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgcmVhZGVyLm9ubG9hZGVuZCA9ICgpID0+IHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSByZWFkZXIucmVzdWx0IGFzIHN0cmluZztcbiAgICAgICAgICAvLyBSZW1vdmUgZGF0YSBVUkwgcHJlZml4XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQuc3BsaXQoJywnKVsxXSk7XG4gICAgICAgIH07XG4gICAgICAgIHJlYWRlci5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChibG9iKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBsZXQgYmFzZTY0ID0gYmFzZTY0SW1hZ2U7XG4gICAgICAvLyBJZiBpbnB1dCBpcyBhIFVSTCwgY29udmVydCB0byBiYXNlNjRcbiAgICAgIGlmIChiYXNlNjQuc3RhcnRzV2l0aCgnaHR0cDovLycpIHx8IGJhc2U2NC5zdGFydHNXaXRoKCdodHRwczovLycpKSB7XG4gICAgICAgIGJhc2U2NCA9IGF3YWl0IHVybFRvQmFzZTY0KGJhc2U2NCk7XG4gICAgICB9IGVsc2UgaWYgKGJhc2U2NC5zdGFydHNXaXRoKCdkYXRhOicpKSB7XG4gICAgICAgIGJhc2U2NCA9IGJhc2U2NC5zcGxpdCgnLCcpWzFdO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtST0JPRkxPV19NT0RFTF9VUkx9P2FwaV9rZXk9JHtST0JPRkxPV19BUElfS0VZfWAsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IGJhc2U2NFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQIGVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgcmV0dXJuIGRhdGFcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignUm9ib2Zsb3cgQVBJIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yIG9jY3VycmVkJ1xuICAgICAgfTtcbiAgICB9XG4gIH1cbn0iXSwibmFtZXMiOlsiUk9CT0ZMT1dfQVBJX0tFWSIsIlJPQk9GTE9XX01PREVMX1VSTCIsIlJvYm9mbG93U2VydmljZSIsInByZWRpY3RNYXRlcmlhbCIsImltYWdlVXJsIiwicmVzcG9uc2UiLCJmZXRjaCIsImVuY29kZVVSSUNvbXBvbmVudCIsIm1ldGhvZCIsImhlYWRlcnMiLCJvayIsIkVycm9yIiwic3RhdHVzIiwiZGF0YSIsImpzb24iLCJlcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIiwicHJlZGljdE1hdGVyaWFsRnJvbUJhc2U2NCIsImJhc2U2NEltYWdlIiwidXJsVG9CYXNlNjQiLCJ1cmwiLCJibG9iIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkZW5kIiwicmVzdWx0Iiwic3BsaXQiLCJvbmVycm9yIiwicmVhZEFzRGF0YVVSTCIsImJhc2U2NCIsInN0YXJ0c1dpdGgiLCJib2R5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/roboflow.ts\n"));

/***/ })

});