"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./services/localApi.ts":
/*!******************************!*\
  !*** ./services/localApi.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeImage: function() { return /* binding */ analyzeImage; },\n/* harmony export */   captureLocalImage: function() { return /* binding */ captureLocalImage; },\n/* harmony export */   connectSerialPort: function() { return /* binding */ connectSerialPort; },\n/* harmony export */   getLocalApiBaseUrl: function() { return /* binding */ getLocalApiBaseUrl; },\n/* harmony export */   getRtspUrl: function() { return /* binding */ getRtspUrl; },\n/* harmony export */   listSerialPorts: function() { return /* binding */ listSerialPorts; },\n/* harmony export */   setLocalApiBaseUrl: function() { return /* binding */ setLocalApiBaseUrl; },\n/* harmony export */   setRtspUrl: function() { return /* binding */ setRtspUrl; },\n/* harmony export */   subscribeWeightStream: function() { return /* binding */ subscribeWeightStream; }\n/* harmony export */ });\n// Local analysis API for color difference analysis\nfunction getLocalApiBaseUrl() {\n    if ( true && window.location.hostname.endsWith(\"vercel.app\")) {\n        return \"/proxy-ai-services\";\n    }\n    return localStorage.getItem(\"localApiBaseUrl\") || \"https://tastevn-ai-services.ig3.ai\";\n}\nfunction setLocalApiBaseUrl(url) {\n    if (true) {\n        localStorage.setItem(\"localApiBaseUrl\", url);\n    }\n}\nasync function analyzeImage(request) {\n    // Create AbortController for timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(()=>controller.abort(), 5000); // 5 seconds timeout\n    try {\n        // Prepare request body: include url2 if present, else base2\n        const body = {\n            url1: request.url1,\n            product_kind: request.product_kind,\n            mode: request.mode\n        };\n        if (request.url2) {\n            body.url2 = request.url2;\n        } else if (request.base2) {\n            body.base2 = request.base2;\n        }\n        const response = await fetch(\"\".concat(getLocalApiBaseUrl(), \"/analyze\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(body),\n            signal: controller.signal\n        });\n        clearTimeout(timeoutId); // Clear timeout if request completes\n        if (!response.ok) {\n            throw new Error(\"Analysis API error! status: \".concat(response.status));\n        }\n        return await response.json();\n    } catch (error) {\n        clearTimeout(timeoutId); // Clear timeout on error\n        if (error instanceof Error && error.name === \"AbortError\") {\n            throw new Error(\"Analysis API request timed out after 5 seconds\");\n        }\n        console.error(\"Error calling local analysis API:\", error);\n        throw error;\n    }\n}\n// Serial port API functions (for settings popup)\nasync function listSerialPorts() {\n    const response = await fetch(\"\".concat(getLocalApiBaseUrl(), \"/ports\"));\n    if (!response.ok) throw new Error(\"Failed to fetch serial ports\");\n    return response.json();\n}\nasync function connectSerialPort(port, baudRate) {\n    const response = await fetch(\"\".concat(getLocalApiBaseUrl(), \"/connect\"), {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            port,\n            baud_rate: baudRate\n        })\n    });\n    if (!response.ok) throw new Error(\"Failed to connect to serial port\");\n    return response.json();\n}\nfunction subscribeWeightStream(onWeight, onError) {\n    const eventSource = new EventSource(\"\".concat(getLocalApiBaseUrl(), \"/weight\"));\n    eventSource.onmessage = (event)=>{\n        onWeight(event.data);\n    };\n    eventSource.onerror = (err)=>{\n        if (onError) onError(err);\n        eventSource.close();\n    };\n    return ()=>eventSource.close();\n}\nfunction getRtspUrl() {\n    if (true) {\n        return localStorage.getItem(\"rtspUrl\") || \"rtsp://169.254.140.61:554\";\n    }\n    return \"rtsp://169.254.140.61:554\";\n}\nfunction setRtspUrl(url) {\n    if (true) {\n        localStorage.setItem(\"rtspUrl\", url);\n    }\n}\n// Capture image from local camera\nasync function captureLocalImage() {\n    const rtspUrl = getRtspUrl();\n    const response = await fetch(\"\".concat(getLocalApiBaseUrl(), \"/capture-image?mode=rtsp&rtsp_url=\").concat(encodeURIComponent(rtspUrl)), {\n        method: \"GET\"\n    });\n    if (!response.ok) throw new Error(\"Failed to capture image\");\n    const data = await response.json();\n    if (!data.success || !data.image_url) throw new Error(\"Capture failed\");\n    return data.image_url;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/localApi.ts\n"));

/***/ })

});