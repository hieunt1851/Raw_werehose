"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./services/api.ts":
/*!*************************!*\
  !*** ./services/api.ts ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeImage: function() { return /* binding */ analyzeImage; },\n/* harmony export */   getPurchaseOrderDetailsBySupplierAndDate: function() { return /* binding */ getPurchaseOrderDetailsBySupplierAndDate; },\n/* harmony export */   purchaseOrderApi: function() { return /* binding */ purchaseOrderApi; },\n/* harmony export */   saveProductPOResult: function() { return /* binding */ saveProductPOResult; },\n/* harmony export */   supplierApi: function() { return /* binding */ supplierApi; }\n/* harmony export */ });\n// API base URL\nconst API_BASE_URL = \"https://ai.block8910.com/api/dev\";\n// Generic API error handler\nclass ApiError extends Error {\n    constructor(status, message){\n        super(message);\n        this.status = status;\n        this.name = \"ApiError\";\n    }\n}\n// Generic fetch wrapper with error handling\nasync function apiFetch(url, options) {\n    try {\n        const response = await fetch(url, {\n            ...options,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n        if (!response.ok) {\n            throw new ApiError(response.status, \"HTTP error! status: \".concat(response.status));\n        }\n        return await response.json();\n    } catch (error) {\n        if (error instanceof ApiError) {\n            throw error;\n        }\n        throw new Error(\"Network error: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n    }\n}\n// Supplier API functions\nconst supplierApi = {\n    // Get all suppliers\n    async getSuppliers () {\n        try {\n            const data = await apiFetch(\"\".concat(API_BASE_URL, \"/raw/supplier/get/\"));\n            // Transform API data to our Supplier interface\n            return data.map((supplier)=>({\n                    id: supplier.id,\n                    code: supplier.code,\n                    name: supplier.name,\n                    phone: supplier.phone || \"\",\n                    email: supplier.email || \"\",\n                    address: supplier.address || \"\"\n                }));\n        } catch (error) {\n            console.error(\"Error fetching suppliers:\", error);\n            // Return fallback data if API fails\n            return [\n                {\n                    id: 1,\n                    code: \"NCC_MEAT\",\n                    name: \"CTY Meat\",\n                    phone: \"090 123 4567\",\n                    email: \"meat@example.com\",\n                    address: \"123 Meat Street\"\n                },\n                {\n                    id: 2,\n                    code: \"NCC_SEAFOOD\",\n                    name: \"CTY Seafood\",\n                    phone: \"090 456 7890\",\n                    email: \"seafood@example.com\",\n                    address: \"456 Seafood Avenue\"\n                }\n            ];\n        }\n    },\n    // Get suppliers by IDs\n    async getSuppliersByIds (supplierIds) {\n        try {\n            const allSuppliers = await this.getSuppliers();\n            return allSuppliers.filter((supplier)=>supplierIds.includes(supplier.id));\n        } catch (error) {\n            console.error(\"Error fetching suppliers by IDs:\", error);\n            return [];\n        }\n    },\n    // Get supplier by ID\n    async getSupplierById (id) {\n        try {\n            const data = await apiFetch(\"\".concat(API_BASE_URL, \"/raw/supplier/get/\").concat(id, \"/\"));\n            return {\n                id: data.id,\n                code: data.code,\n                name: data.name,\n                phone: data.phone || \"\",\n                email: data.email || \"\",\n                address: data.address || \"\"\n            };\n        } catch (error) {\n            console.error(\"Error fetching supplier \".concat(id, \":\"), error);\n            return null;\n        }\n    },\n    // Create new supplier\n    async createSupplier (supplier) {\n        const data = await apiFetch(\"\".concat(API_BASE_URL, \"/raw/supplier/create/\"), {\n            method: \"POST\",\n            body: JSON.stringify(supplier)\n        });\n        return {\n            id: data.id,\n            code: data.code,\n            name: data.name,\n            phone: data.phone || \"\",\n            email: data.email || \"\",\n            address: data.address || \"\"\n        };\n    },\n    // Update supplier\n    async updateSupplier (id, supplier) {\n        const data = await apiFetch(\"\".concat(API_BASE_URL, \"/raw/supplier/update/\").concat(id, \"/\"), {\n            method: \"PUT\",\n            body: JSON.stringify(supplier)\n        });\n        return {\n            id: data.id,\n            code: data.code,\n            name: data.name,\n            phone: data.phone || \"\",\n            email: data.email || \"\",\n            address: data.address || \"\"\n        };\n    },\n    // Delete supplier\n    async deleteSupplier (id) {\n        try {\n            await apiFetch(\"\".concat(API_BASE_URL, \"/raw/supplier/delete/\").concat(id, \"/\"), {\n                method: \"DELETE\"\n            });\n            return true;\n        } catch (error) {\n            console.error(\"Error deleting supplier \".concat(id, \":\"), error);\n            return false;\n        }\n    }\n};\n// Purchase Order API functions\nconst purchaseOrderApi = {\n    // Get purchase orders for a specific date\n    async getPurchaseOrders (date) {\n        try {\n            const data = await apiFetch(\"\".concat(API_BASE_URL, \"/raw/po/get/?date=\").concat(date));\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching purchase orders:\", error);\n            throw error;\n        }\n    },\n    // Get unique supplier IDs from orders\n    getUniqueSupplierIds (orders) {\n        return orders.map((order)=>order.po_supplier_id);\n    },\n    // Get orders for a specific supplier\n    getOrdersBySupplier (orders, supplierId) {\n        return orders.filter((order)=>order.po_supplier_id === supplierId);\n    },\n    // Get all products for a supplier's orders\n    getOrderItems (orders) {\n        const allItems = [];\n        orders.forEach((order)=>{\n            order.po_items.forEach((item)=>{\n                allItems.push(item);\n            });\n        });\n        return allItems;\n    }\n};\n// Get purchase order details for a specific supplier and date\nasync function getPurchaseOrderDetailsBySupplierAndDate(supplierCode, date) {\n    const url = \"\".concat(API_BASE_URL, \"/raw/po/get/?supplier=\").concat(encodeURIComponent(supplierCode), \"&date=\").concat(date);\n    try {\n        const data = await apiFetch(url);\n        return data;\n    } catch (error) {\n        console.error(\"Error fetching purchase order details by supplier and date:\", error);\n        throw error;\n    }\n}\n/**\n * Save product PO result to server\n * @param params - { po_id, product_id, weight, photo (File), color, fat_percentage, meat_percentage }\n */ async function saveProductPOResult(params) {\n    const formData = new FormData();\n    formData.append(\"po_id\", String(params.po_id));\n    formData.append(\"product_id\", String(params.product_id));\n    formData.append(\"weight\", String(params.weight));\n    formData.append(\"photo\", params.photo);\n    if (params.color !== undefined) formData.append(\"color\", String(params.color));\n    if (params.fat_percentage !== undefined) formData.append(\"fat_percentage\", String(params.fat_percentage));\n    if (params.meat_percentage !== undefined) formData.append(\"meat_percentage\", String(params.meat_percentage));\n    const response = await fetch(\"https://ai.block8910.com/api/dev/raw/po/product\", {\n        method: \"POST\",\n        body: formData\n    });\n    if (!response.ok) {\n        throw new Error(\"API error: \" + response.status);\n    }\n    console.log(\"response\", response);\n    return response.json();\n}\nasync function analyzeImage(request) {\n    // Create AbortController for timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(()=>controller.abort(), 5000); // 5 seconds timeout\n    try {\n        const response = await fetch(\"http://127.0.0.1:5000/analyze\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(request),\n            signal: controller.signal\n        });\n        clearTimeout(timeoutId); // Clear timeout if request completes\n        if (!response.ok) {\n            throw new ApiError(response.status, \"Analysis API error! status: \".concat(response.status));\n        }\n        return await response.json();\n    } catch (error) {\n        clearTimeout(timeoutId); // Clear timeout on error\n        if (error instanceof Error && error.name === \"AbortError\") {\n            throw new Error(\"Analysis API request timed out after 5 seconds\");\n        }\n        console.error(\"Error calling local analysis API:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NlcnZpY2VzL2FwaS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUVBLGVBQWU7QUFDZixNQUFNQSxlQUFlO0FBWXJCLDRCQUE0QjtBQUM1QixNQUFNQyxpQkFBaUJDO0lBQ3JCQyxZQUFZLE1BQXFCLEVBQUVFLE9BQWUsQ0FBRTtRQUNsRCxLQUFLLENBQUNBO2FBRFdELFNBQUFBO1FBRWpCLElBQUksQ0FBQ0UsSUFBSSxHQUFHO0lBQ2Q7QUFDRjtBQUVBLDRDQUE0QztBQUM1QyxlQUFlQyxTQUFZQyxHQUFXLEVBQUVDLE9BQXFCO0lBQzNELElBQUk7UUFDRixNQUFNQyxXQUFXLE1BQU1DLE1BQU1ILEtBQUs7WUFDaEMsR0FBR0MsT0FBTztZQUNWRyxTQUFTO2dCQUNQLGdCQUFnQjttQkFDYkgsb0JBQUFBLDhCQUFBQSxRQUFTRyxPQUFPO1lBQ3JCO1FBQ0Y7UUFFQSxJQUFJLENBQUNGLFNBQVNHLEVBQUUsRUFBRTtZQUNoQixNQUFNLElBQUlaLFNBQVNTLFNBQVNOLE1BQU0sRUFBRSx1QkFBdUMsT0FBaEJNLFNBQVNOLE1BQU07UUFDNUU7UUFFQSxPQUFPLE1BQU1NLFNBQVNJLElBQUk7SUFDNUIsRUFBRSxPQUFPQyxPQUFPO1FBQ2QsSUFBSUEsaUJBQWlCZCxVQUFVO1lBQzdCLE1BQU1jO1FBQ1I7UUFDQSxNQUFNLElBQUliLE1BQU0sa0JBQTJFLE9BQXpEYSxpQkFBaUJiLFFBQVFhLE1BQU1WLE9BQU8sR0FBRztJQUM3RTtBQUNGO0FBRUEseUJBQXlCO0FBQ2xCLE1BQU1XLGNBQWM7SUFDekIsb0JBQW9CO0lBQ3BCLE1BQU1DO1FBQ0osSUFBSTtZQUNGLE1BQU1DLE9BQXNCLE1BQU1YLFNBQXdCLEdBQWdCLE9BQWJQLGNBQWE7WUFFMUUsK0NBQStDO1lBQy9DLE9BQU9rQixLQUFLQyxHQUFHLENBQUNDLENBQUFBLFdBQWE7b0JBQzNCQyxJQUFJRCxTQUFTQyxFQUFFO29CQUNmQyxNQUFNRixTQUFTRSxJQUFJO29CQUNu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QU0saUNBQWlDO1lBQzVEdUIsUUFBUTtZQUNSdEIsU0FBUztnQkFBRSxnQkFBZ0I7WUFBbUI7WUFDOUN1QixNQUFNQyxLQUFLQyxTQUFTLENBQUNxQztZQUNyQk0sUUFBUUwsV0FBV0ssTUFBTTtRQUMzQjtRQUVBQyxhQUFhSixZQUFZLHFDQUFxQztRQUU5RCxJQUFJLENBQUNuRSxTQUFTRyxFQUFFLEVBQUU7WUFDaEIsTUFBTSxJQUFJWixTQUFTUyxTQUFTTixNQUFNLEVBQUUsK0JBQStDLE9BQWhCTSxTQUFTTixNQUFNO1FBQ3BGO1FBRUEsT0FBTyxNQUFNTSxTQUFTSSxJQUFJO0lBQzVCLEVBQUUsT0FBT0MsT0FBTztRQUNka0UsYUFBYUosWUFBWSx5QkFBeUI7UUFFbEQsSUFBSTlELGlCQUFpQmIsU0FBU2EsTUFBTVQsSUFBSSxLQUFLLGNBQWM7WUFDekQsTUFBTSxJQUFJSixNQUFNO1FBQ2xCO1FBRUF3QixRQUFRWCxLQUFLLENBQUMscUNBQXFDQTtRQUNuRCxNQUFNQTtJQUNSO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc2VydmljZXMvYXBpLnRzPzRiZTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3VwcGxpZXIsIEFwaVB1cmNoYXNlT3JkZXJSZXNwb25zZSwgQXBpT3JkZXIsIEFwaU9yZGVySXRlbSB9IGZyb20gJ0AvdHlwZXMnO1xuXG4vLyBBUEkgYmFzZSBVUkxcbmNvbnN0IEFQSV9CQVNFX1VSTCA9ICdodHRwczovL2FpLmJsb2NrODkxMC5jb20vYXBpL2Rldic7XG5cbi8vIEFQSSBpbnRlcmZhY2UgZm9yIHN1cHBsaWVyIGRhdGFcbmludGVyZmFjZSBBcGlTdXBwbGllciB7XG4gIGlkOiBudW1iZXI7XG4gIGNvZGU6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBwaG9uZTogc3RyaW5nO1xuICBlbWFpbDogc3RyaW5nO1xuICBhZGRyZXNzOiBzdHJpbmc7XG59XG5cbi8vIEdlbmVyaWMgQVBJIGVycm9yIGhhbmRsZXJcbmNsYXNzIEFwaUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgc3RhdHVzOiBudW1iZXIsIG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9ICdBcGlFcnJvcic7XG4gIH1cbn1cblxuLy8gR2VuZXJpYyBmZXRjaCB3cmFwcGVyIHdpdGggZXJyb3IgaGFuZGxpbmdcbmFzeW5jIGZ1bmN0aW9uIGFwaUZldGNoPFQ+KHVybDogc3RyaW5nLCBvcHRpb25zPzogUmVxdWVzdEluaXQpOiBQcm9taXNlPFQ+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgLi4ub3B0aW9ucz8uaGVhZGVycyxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgQXBpRXJyb3IocmVzcG9uc2Uuc3RhdHVzLCBgSFRUUCBlcnJvciEgc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEFwaUVycm9yKSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBOZXR3b3JrIGVycm9yOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICB9XG59XG5cbi8vIFN1cHBsaWVyIEFQSSBmdW5jdGlvbnNcbmV4cG9ydCBjb25zdCBzdXBwbGllckFwaSA9IHtcbiAgLy8gR2V0IGFsbCBzdXBwbGllcnNcbiAgYXN5bmMgZ2V0U3VwcGxpZXJzKCk6IFByb21pc2U8U3VwcGxpZXJbXT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhOiBBcGlTdXBwbGllcltdID0gYXdhaXQgYXBpRmV0Y2g8QXBpU3VwcGxpZXJbXT4oYCR7QVBJX0JBU0VfVVJMfS9yYXcvc3VwcGxpZXIvZ2V0L2ApO1xuICAgICAgXG4gICAgICAvLyBUcmFuc2Zvcm0gQVBJIGRhdGEgdG8gb3VyIFN1cHBsaWVyIGludGVyZmFjZVxuICAgICAgcmV0dXJuIGRhdGEubWFwKHN1cHBsaWVyID0+ICh7XG4gICAgICAgIGlkOiBzdXBwbGllci5pZCxcbiAgICAgICAgY29kZTogc3VwcGxpZXIuY29kZSxcbiAgICAgICAgbmFtZTogc3VwcGxpZXIubmFtZSxcbiAgICAgICAgcGhvbmU6IHN1cHBsaWVyLnBob25lIHx8ICcnLFxuICAgICAgICBlbWFpbDogc3VwcGxpZXIuZW1haWwgfHwgJycsXG4gICAgICAgIGFkZHJlc3M6IHN1cHBsaWVyLmFkZHJlc3MgfHwgJydcbiAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgc3VwcGxpZXJzOicsIGVycm9yKTtcbiAgICAgIFxuICAgICAgLy8gUmV0dXJuIGZhbGxiYWNrIGRhdGEgaWYgQVBJIGZhaWxzXG4gICAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6IDEsXG4gICAgICAgICAgY29kZTogJ05DQ19NRUFUJyxcbiAgICAgICAgICBuYW1lOiAnQ1RZIE1lYXQnLFxuICAgICAgICAgIHBob25lOiAnMDkwIDEyMyA0NTY3JyxcbiAgICAgICAgICBlbWFpbDogJ21lYXRAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIGFkZHJlc3M6ICcxMjMgTWVhdCBTdHJlZXQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogMixcbiAgICAgICAgICBjb2RlOiAnTkNDX1NFQUZPT0QnLFxuICAgICAgICAgIG5hbWU6ICdDVFkgU2VhZm9vZCcsXG4gICAgICAgICAgcGhvbmU6ICcwOTAgNDU2IDc4OTAnLFxuICAgICAgICAgIGVtYWlsOiAnc2VhZm9vZEBleGFtcGxlLmNvbScsXG4gICAgICAgICAgYWRkcmVzczogJzQ1NiBTZWFmb29kIEF2ZW51ZSdcbiAgICAgICAgfVxuICAgICAgXTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gR2V0IHN1cHBsaWVycyBieSBJRHNcbiAgYXN5bmMgZ2V0U3VwcGxpZXJzQnlJZHMoc3VwcGxpZXJJZHM6IG51bWJlcltdKTogUHJvbWlzZTxTdXBwbGllcltdPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFsbFN1cHBsaWVycyA9IGF3YWl0IHRoaXMuZ2V0U3VwcGxpZXJzKCk7XG4gICAgICByZXR1cm4gYWxsU3VwcGxpZXJzLmZpbHRlcihzdXBwbGllciA9PiBzdXBwbGllcklkcy5pbmNsdWRlcyhzdXBwbGllci5pZCkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBzdXBwbGllcnMgYnkgSURzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gR2V0IHN1cHBsaWVyIGJ5IElEXG4gIGFzeW5jIGdldFN1cHBsaWVyQnlJZChpZDogbnVtYmVyKTogUHJvbWlzZTxTdXBwbGllciB8IG51bGw+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF0YTogQXBpU3VwcGxpZXIgPSBhd2FpdCBhcGlGZXRjaDxBcGlTdXBwbGllcj4oYCR7QVBJX0JBU0VfVVJMfS9yYXcvc3VwcGxpZXIvZ2V0LyR7aWR9L2ApO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogZGF0YS5pZCxcbiAgICAgICAgY29kZTogZGF0YS5jb2RlLFxuICAgICAgICBuYW1lOiBkYXRhLm5hbWUsXG4gICAgICAgIHBob25lOiBkYXRhLnBob25lIHx8ICcnLFxuICAgICAgICBlbWFpbDogZGF0YS5lbWFpbCB8fCAnJyxcbiAgICAgICAgYWRkcmVzczogZGF0YS5hZGRyZXNzIHx8ICcnXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBmZXRjaGluZyBzdXBwbGllciAke2lkfTpgLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sXG5cbiAgLy8gQ3JlYXRlIG5ldyBzdXBwbGllclxuICBhc3luYyBjcmVhdGVTdXBwbGllcihzdXBwbGllcjogT21pdDxTdXBwbGllciwgJ2lkJz4pOiBQcm9taXNlPFN1cHBsaWVyPiB7XG4gICAgY29uc3QgZGF0YTogQXBpU3VwcGxpZXIgPSBhd2FpdCBhcGlGZXRjaDxBcGlTdXBwbGllcj4oYCR7QVBJX0JBU0VfVVJMfS9yYXcvc3VwcGxpZXIvY3JlYXRlL2AsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoc3VwcGxpZXIpLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgY29kZTogZGF0YS5jb2RlLFxuICAgICAgbmFtZTogZGF0YS5uYW1lLFxuICAgICAgcGhvbmU6IGRhdGEucGhvbmUgfHwgJycsXG4gICAgICBlbWFpbDogZGF0YS5lbWFpbCB8fCAnJyxcbiAgICAgIGFkZHJlc3M6IGRhdGEuYWRkcmVzcyB8fCAnJ1xuICAgIH07XG4gIH0sXG5cbiAgLy8gVXBkYXRlIHN1cHBsaWVyXG4gIGFzeW5jIHVwZGF0ZVN1cHBsaWVyKGlkOiBudW1iZXIsIHN1cHBsaWVyOiBQYXJ0aWFsPFN1cHBsaWVyPik6IFByb21pc2U8U3VwcGxpZXI+IHtcbiAgICBjb25zdCBkYXRhOiBBcGlTdXBwbGllciA9IGF3YWl0IGFwaUZldGNoPEFwaVN1cHBsaWVyPihgJHtBUElfQkFTRV9VUkx9L3Jhdy9zdXBwbGllci91cGRhdGUvJHtpZH0vYCwge1xuICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHN1cHBsaWVyKSxcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBpZDogZGF0YS5pZCxcbiAgICAgIGNvZGU6IGRhdGEuY29kZSxcbiAgICAgIG5hbWU6IGRhdGEubmFtZSxcbiAgICAgIHBob25lOiBkYXRhLnBob25lIHx8ICcnLFxuICAgICAgZW1haWw6IGRhdGEuZW1haWwgfHwgJycsXG4gICAgICBhZGRyZXNzOiBkYXRhLmFkZHJlc3MgfHwgJydcbiAgICB9O1xuICB9LFxuXG4gIC8vIERlbGV0ZSBzdXBwbGllclxuICBhc3luYyBkZWxldGVTdXBwbGllcihpZDogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGFwaUZldGNoKGAke0FQSV9CQVNFX1VSTH0vcmF3L3N1cHBsaWVyL2RlbGV0ZS8ke2lkfS9gLCB7XG4gICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBkZWxldGluZyBzdXBwbGllciAke2lkfTpgLCBlcnJvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59O1xuXG4vLyBQdXJjaGFzZSBPcmRlciBBUEkgZnVuY3Rpb25zXG5leHBvcnQgY29uc3QgcHVyY2hhc2VPcmRlckFwaSA9IHtcbiAgLy8gR2V0IHB1cmNoYXNlIG9yZGVycyBmb3IgYSBzcGVjaWZpYyBkYXRlXG4gIGFzeW5jIGdldFB1cmNoYXNlT3JkZXJzKGRhdGU6IHN0cmluZyk6IFByb21pc2U8QXBpUHVyY2hhc2VPcmRlclJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRhdGE6IEFwaVB1cmNoYXNlT3JkZXJSZXNwb25zZSA9IGF3YWl0IGFwaUZldGNoPEFwaVB1cmNoYXNlT3JkZXJSZXNwb25zZT4oXG4gICAgICAgIGAke0FQSV9CQVNFX1VSTH0vcmF3L3BvL2dldC8/ZGF0ZT0ke2RhdGV9YFxuICAgICAgKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwdXJjaGFzZSBvcmRlcnM6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuXG4gIC8vIEdldCB1bmlxdWUgc3VwcGxpZXIgSURzIGZyb20gb3JkZXJzXG4gIGdldFVuaXF1ZVN1cHBsaWVySWRzKG9yZGVyczogQXBpT3JkZXJbXSk6IG51bWJlcltdIHtcbiAgICByZXR1cm4gb3JkZXJzLm1hcChvcmRlciA9PiBvcmRlci5wb19zdXBwbGllcl9pZCk7XG4gIH0sXG5cbiAgLy8gR2V0IG9yZGVycyBmb3IgYSBzcGVjaWZpYyBzdXBwbGllclxuICBnZXRPcmRlcnNCeVN1cHBsaWVyKG9yZGVyczogQXBpT3JkZXJbXSwgc3VwcGxpZXJJZDogbnVtYmVyKTogQXBpT3JkZXJbXSB7XG4gICAgcmV0dXJuIG9yZGVycy5maWx0ZXIob3JkZXIgPT4gb3JkZXIucG9fc3VwcGxpZXJfaWQgPT09IHN1cHBsaWVySWQpO1xuICB9LFxuXG4gIC8vIEdldCBhbGwgcHJvZHVjdHMgZm9yIGEgc3VwcGxpZXIncyBvcmRlcnNcbiAgZ2V0T3JkZXJJdGVtcyhvcmRlcnM6IEFwaU9yZGVyW10pOiBBcGlPcmRlckl0ZW1bXSB7XG4gICAgY29uc3QgYWxsSXRlbXM6IEFwaU9yZGVySXRlbVtdID0gW107XG4gICAgb3JkZXJzLmZvckVhY2gob3JkZXIgPT4ge1xuICAgICAgb3JkZXIucG9faXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgYWxsSXRlbXMucHVzaChpdGVtKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBhbGxJdGVtcztcbiAgfVxufTtcblxuLy8gR2V0IHB1cmNoYXNlIG9yZGVyIGRldGFpbHMgZm9yIGEgc3BlY2lmaWMgc3VwcGxpZXIgYW5kIGRhdGVcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQdXJjaGFzZU9yZGVyRGV0YWlsc0J5U3VwcGxpZXJBbmREYXRlKHN1cHBsaWVyQ29kZTogc3RyaW5nLCBkYXRlOiBzdHJpbmcpIHtcbiAgY29uc3QgdXJsID0gYCR7QVBJX0JBU0VfVVJMfS9yYXcvcG8vZ2V0Lz9zdXBwbGllcj0ke2VuY29kZVVSSUNvbXBvbmVudChzdXBwbGllckNvZGUpfSZkYXRlPSR7ZGF0ZX1gO1xuICB0cnkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBhcGlGZXRjaDxhbnk+KHVybCk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcHVyY2hhc2Ugb3JkZXIgZGV0YWlscyBieSBzdXBwbGllciBhbmQgZGF0ZTonLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBTYXZlIHByb2R1Y3QgUE8gcmVzdWx0IHRvIHNlcnZlclxuICogQHBhcmFtIHBhcmFtcyAtIHsgcG9faWQsIHByb2R1Y3RfaWQsIHdlaWdodCwgcGhvdG8gKEZpbGUpLCBjb2xvciwgZmF0X3BlcmNlbnRhZ2UsIG1lYXRfcGVyY2VudGFnZSB9XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlUHJvZHVjdFBPUmVzdWx0KHBhcmFtczoge1xuICBwb19pZDogbnVtYmVyO1xuICBwcm9kdWN0X2lkOiBudW1iZXI7XG4gIHdlaWdodDogbnVtYmVyO1xuICBwaG90bzogRmlsZTtcbiAgY29sb3I/OiBudW1iZXI7XG4gIGZhdF9wZXJjZW50YWdlPzogbnVtYmVyO1xuICBtZWF0X3BlcmNlbnRhZ2U/OiBudW1iZXI7XG59KTogUHJvbWlzZTxhbnk+IHtcbiAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgZm9ybURhdGEuYXBwZW5kKCdwb19pZCcsIFN0cmluZyhwYXJhbXMucG9faWQpKTtcbiAgZm9ybURhdGEuYXBwZW5kKCdwcm9kdWN0X2lkJywgU3RyaW5nKHBhcmFtcy5wcm9kdWN0X2lkKSk7XG4gIGZvcm1EYXRhLmFwcGVuZCgnd2VpZ2h0JywgU3RyaW5nKHBhcmFtcy53ZWlnaHQpKTtcbiAgZm9ybURhdGEuYXBwZW5kKCdwaG90bycsIHBhcmFtcy5waG90byk7XG4gIGlmIChwYXJhbXMuY29sb3IgIT09IHVuZGVmaW5lZCkgZm9ybURhdGEuYXBwZW5kKCdjb2xvcicsIFN0cmluZyhwYXJhbXMuY29sb3IpKTtcbiAgaWYgKHBhcmFtcy5mYXRfcGVyY2VudGFnZSAhPT0gdW5kZWZpbmVkKSBmb3JtRGF0YS5hcHBlbmQoJ2ZhdF9wZXJjZW50YWdlJywgU3RyaW5nKHBhcmFtcy5mYXRfcGVyY2VudGFnZSkpO1xuICBpZiAocGFyYW1zLm1lYXRfcGVyY2VudGFnZSAhPT0gdW5kZWZpbmVkKSBmb3JtRGF0YS5hcHBlbmQoJ21lYXRfcGVyY2VudGFnZScsIFN0cmluZyhwYXJhbXMubWVhdF9wZXJjZW50YWdlKSk7XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9haS5ibG9jazg5MTAuY29tL2FwaS9kZXYvcmF3L3BvL3Byb2R1Y3QnLCB7XG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgYm9keTogZm9ybURhdGFcbiAgfSk7XG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0FQSSBlcnJvcjogJyArIHJlc3BvbnNlLnN0YXR1cyk7XG4gIH1cbiAgY29uc29sZS5sb2coJ3Jlc3BvbnNlJywgcmVzcG9uc2UpO1xuICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufVxuXG4vLyBMb2NhbCBhbmFseXNpcyBBUEkgZm9yIGNvbG9yIGRpZmZlcmVuY2UgYW5hbHlzaXNcbmV4cG9ydCBpbnRlcmZhY2UgQW5hbHlzaXNSZXF1ZXN0IHtcbiAgdXJsMTogc3RyaW5nO1xuICBiYXNlMjogc3RyaW5nO1xuICBwcm9kdWN0X2tpbmQ6IHN0cmluZztcbiAgbW9kZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFuYWx5c2lzUmVzcG9uc2Uge1xuICBjb2xvcl9kaWZmZXJlbmNlOiBudW1iZXI7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFuYWx5emVJbWFnZShyZXF1ZXN0OiBBbmFseXNpc1JlcXVlc3QpOiBQcm9taXNlPEFuYWx5c2lzUmVzcG9uc2U+IHtcbiAgLy8gQ3JlYXRlIEFib3J0Q29udHJvbGxlciBmb3IgdGltZW91dFxuICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICBjb25zdCB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IGNvbnRyb2xsZXIuYWJvcnQoKSwgNTAwMCk7IC8vIDUgc2Vjb25kcyB0aW1lb3V0XG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwOi8vMTI3LjAuMC4xOjUwMDAvYW5hbHl6ZScsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSxcbiAgICAgIHNpZ25hbDogY29udHJvbGxlci5zaWduYWxcbiAgICB9KTtcbiAgICBcbiAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTsgLy8gQ2xlYXIgdGltZW91dCBpZiByZXF1ZXN0IGNvbXBsZXRlc1xuICAgIFxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBBcGlFcnJvcihyZXNwb25zZS5zdGF0dXMsIGBBbmFseXNpcyBBUEkgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7IC8vIENsZWFyIHRpbWVvdXQgb24gZXJyb3JcbiAgICBcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnJvci5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQW5hbHlzaXMgQVBJIHJlcXVlc3QgdGltZWQgb3V0IGFmdGVyIDUgc2Vjb25kcycpO1xuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjYWxsaW5nIGxvY2FsIGFuYWx5c2lzIEFQSTonLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn0gIl0sIm5hbWVzIjpbIkFQSV9CQVNFX1VSTCIsIkFwaUVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInN0YXR1cyIsIm1lc3NhZ2UiLCJuYW1lIiwiYXBpRmV0Y2giLCJ1cmwiLCJvcHRpb25zIiwicmVzcG9uc2UiLCJmZXRjaCIsImhlYWRlcnMiLCJvayIsImpzb24iLCJlcnJvciIsInN1cHBsaWVyQXBpIiwiZ2V0U3VwcGxpZXJzIiwiZGF0YSIsIm1hcCIsInN1cHBsaWVyIiwiaWQiLCJjb2RlIiwicGhvbmUiLCJlbWFpbCIsImFkZHJlc3MiLCJjb25zb2xlIiwiZ2V0U3VwcGxpZXJzQnlJZHMiLCJzdXBwbGllcklkcyIsImFsbFN1cHBsaWVycyIsImZpbHRlciIsImluY2x1ZGVzIiwiZ2V0U3VwcGxpZXJCeUlkIiwiY3JlYXRlU3VwcGxpZXIiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInVwZGF0ZVN1cHBsaWVyIiwiZGVsZXRlU3VwcGxpZXIiLCJwdXJjaGFzZU9yZGVyQXBpIiwiZ2V0UHVyY2hhc2VPcmRlcnMiLCJkYXRlIiwiZ2V0VW5pcXVlU3VwcGxpZXJJZHMiLCJvcmRlcnMiLCJvcmRlciIsInBvX3N1cHBsaWVyX2lkIiwiZ2V0T3JkZXJzQnlTdXBwbGllciIsInN1cHBsaWVySWQiLCJnZXRPcmRlckl0ZW1zIiwiYWxsSXRlbXMiLCJmb3JFYWNoIiwicG9faXRlbXMiLCJpdGVtIiwicHVzaCIsImdldFB1cmNoYXNlT3JkZXJEZXRhaWxzQnlTdXBwbGllckFuZERhdGUiLCJzdXBwbGllckNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzYXZlUHJvZHVjdFBPUmVzdWx0IiwicGFyYW1zIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsIlN0cmluZyIsInBvX2lkIiwicHJvZHVjdF9pZCIsIndlaWdodCIsInBob3RvIiwiY29sb3IiLCJ1bmRlZmluZWQiLCJmYXRfcGVyY2VudGFnZSIsIm1lYXRfcGVyY2VudGFnZSIsImxvZyIsImFuYWx5emVJbWFnZSIsInJlcXVlc3QiLCJjb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwidGltZW91dElkIiwic2V0VGltZW91dCIsImFib3J0Iiwic2lnbmFsIiwiY2xlYXJUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/api.ts\n"));

/***/ })

});