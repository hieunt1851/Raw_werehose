"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./services/api.ts":
/*!*************************!*\
  !*** ./services/api.ts ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeImage: function() { return /* binding */ analyzeImage; },\n/* harmony export */   getPurchaseOrderDetailsBySupplierAndDate: function() { return /* binding */ getPurchaseOrderDetailsBySupplierAndDate; },\n/* harmony export */   purchaseOrderApi: function() { return /* binding */ purchaseOrderApi; },\n/* harmony export */   removeProductPOResult: function() { return /* binding */ removeProductPOResult; },\n/* harmony export */   saveProductPOResult: function() { return /* binding */ saveProductPOResult; },\n/* harmony export */   supplierApi: function() { return /* binding */ supplierApi; }\n/* harmony export */ });\n// API base URL\nconst API_BASE_URL = \"https://ai.block8910.com/api/dev\";\n// Generic API error handler\nclass ApiError extends Error {\n    constructor(status, message){\n        super(message);\n        this.status = status;\n        this.name = \"ApiError\";\n    }\n}\n// Generic fetch wrapper with error handling\nasync function apiFetch(url, options) {\n    try {\n        const response = await fetch(url, {\n            ...options,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n        if (!response.ok) {\n            throw new ApiError(response.status, \"HTTP error! status: \".concat(response.status));\n        }\n        return await response.json();\n    } catch (error) {\n        if (error instanceof ApiError) {\n            throw error;\n        }\n        throw new Error(\"Network error: \".concat(error instanceof Error ? error.message : \"Unknown error\"));\n    }\n}\n// Supplier API functions\nconst supplierApi = {\n    // Get all suppliers\n    async getSuppliers () {\n        try {\n            const data = await apiFetch(\"\".concat(API_BASE_URL, \"/raw/supplier/get/\"));\n            // Transform API data to our Supplier interface\n            return data.map((supplier)=>({\n                    id: supplier.id,\n                    code: supplier.code,\n                    name: supplier.name,\n                    phone: supplier.phone || \"\",\n                    email: supplier.email || \"\",\n                    address: supplier.address || \"\"\n                }));\n        } catch (error) {\n            console.error(\"Error fetching suppliers:\", error);\n            // Return fallback data if API fails\n            return [\n                {\n                    id: 1,\n                    code: \"NCC_MEAT\",\n                    name: \"CTY Meat\",\n                    phone: \"090 123 4567\",\n                    email: \"meat@example.com\",\n                    address: \"123 Meat Street\"\n                },\n                {\n                    id: 2,\n                    code: \"NCC_SEAFOOD\",\n                    name: \"CTY Seafood\",\n                    phone: \"090 456 7890\",\n                    email: \"seafood@example.com\",\n                    address: \"456 Seafood Avenue\"\n                }\n            ];\n        }\n    },\n    // Get suppliers by IDs\n    async getSuppliersByIds (supplierIds) {\n        try {\n            const allSuppliers = await this.getSuppliers();\n            return allSuppliers.filter((supplier)=>supplierIds.includes(supplier.id));\n        } catch (error) {\n            console.error(\"Error fetching suppliers by IDs:\", error);\n            return [];\n        }\n    },\n    // Get supplier by ID\n    async getSupplierById (id) {\n        try {\n            const data = await apiFetch(\"\".concat(API_BASE_URL, \"/raw/supplier/get/\").concat(id, \"/\"));\n            return {\n                id: data.id,\n                code: data.code,\n                name: data.name,\n                phone: data.phone || \"\",\n                email: data.email || \"\",\n                address: data.address || \"\"\n            };\n        } catch (error) {\n            console.error(\"Error fetching supplier \".concat(id, \":\"), error);\n            return null;\n        }\n    },\n    // Create new supplier\n    async createSupplier (supplier) {\n        const data = await apiFetch(\"\".concat(API_BASE_URL, \"/raw/supplier/create/\"), {\n            method: \"POST\",\n            body: JSON.stringify(supplier)\n        });\n        return {\n            id: data.id,\n            code: data.code,\n            name: data.name,\n            phone: data.phone || \"\",\n            email: data.email || \"\",\n            address: data.address || \"\"\n        };\n    },\n    // Update supplier\n    async updateSupplier (id, supplier) {\n        const data = await apiFetch(\"\".concat(API_BASE_URL, \"/raw/supplier/update/\").concat(id, \"/\"), {\n            method: \"PUT\",\n            body: JSON.stringify(supplier)\n        });\n        return {\n            id: data.id,\n            code: data.code,\n            name: data.name,\n            phone: data.phone || \"\",\n            email: data.email || \"\",\n            address: data.address || \"\"\n        };\n    },\n    // Delete supplier\n    async deleteSupplier (id) {\n        try {\n            await apiFetch(\"\".concat(API_BASE_URL, \"/raw/supplier/delete/\").concat(id, \"/\"), {\n                method: \"DELETE\"\n            });\n            return true;\n        } catch (error) {\n            console.error(\"Error deleting supplier \".concat(id, \":\"), error);\n            return false;\n        }\n    }\n};\n// Purchase Order API functions\nconst purchaseOrderApi = {\n    // Get purchase orders for a specific date\n    async getPurchaseOrders (date) {\n        try {\n            const data = await apiFetch(\"\".concat(API_BASE_URL, \"/raw/po/get/?date=\").concat(date));\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching purchase orders:\", error);\n            throw error;\n        }\n    },\n    // Get unique supplier IDs from orders\n    getUniqueSupplierIds (orders) {\n        return orders.map((order)=>order.po_supplier_id);\n    },\n    // Get orders for a specific supplier\n    getOrdersBySupplier (orders, supplierId) {\n        return orders.filter((order)=>order.po_supplier_id === supplierId);\n    },\n    // Get all products for a supplier's orders\n    getOrderItems (orders) {\n        const allItems = [];\n        orders.forEach((order)=>{\n            order.po_items.forEach((item)=>{\n                allItems.push(item);\n            });\n        });\n        return allItems;\n    }\n};\n// Get purchase order details for a specific supplier and date\nasync function getPurchaseOrderDetailsBySupplierAndDate(supplierCode, date) {\n    const url = \"\".concat(API_BASE_URL, \"/raw/po/get/?supplier=\").concat(encodeURIComponent(supplierCode), \"&date=\").concat(date);\n    try {\n        const data = await apiFetch(url);\n        return data;\n    } catch (error) {\n        console.error(\"Error fetching purchase order details by supplier and date:\", error);\n        throw error;\n    }\n}\n/**\n * Save product PO result to server\n * @param params - { po_id, product_id, weight, photo (File), color, fat_percentage, meat_percentage }\n */ async function saveProductPOResult(params) {\n    const formData = new FormData();\n    formData.append(\"po_id\", String(params.po_id));\n    formData.append(\"product_id\", String(params.product_id));\n    formData.append(\"weight\", String(params.weight));\n    formData.append(\"photo\", params.photo);\n    if (params.color !== undefined) formData.append(\"color\", String(params.color));\n    if (params.fat_percentage !== undefined) formData.append(\"fat_percentage\", String(params.fat_percentage));\n    if (params.meat_percentage !== undefined) formData.append(\"meat_percentage\", String(params.meat_percentage));\n    const response = await fetch(\"https://ai.block8910.com/api/dev/raw/po/product\", {\n        method: \"POST\",\n        body: formData\n    });\n    if (!response.ok) {\n        throw new Error(\"API error: \" + response.status);\n    }\n    console.log(\"response.json()\", await response.json());\n    return response.json();\n}\n/**\n * Remove product PO result from server\n * @param item_id - The item_id to remove\n */ async function removeProductPOResult(item_id) {\n    const formData = new FormData();\n    formData.append(\"item_id\", String(item_id));\n    const response = await fetch(\"https://ai.block8910.com/api/dev/raw/po/product/remove\", {\n        method: \"POST\",\n        body: formData\n    });\n    if (!response.ok) {\n        throw new Error(\"API error: \" + response.status);\n    }\n    return response.json();\n}\nasync function analyzeImage(request) {\n    // Create AbortController for timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(()=>controller.abort(), 5000); // 5 seconds timeout\n    try {\n        const response = await fetch(\"http://127.0.0.1:5000/analyze\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(request),\n            signal: controller.signal\n        });\n        clearTimeout(timeoutId); // Clear timeout if request completes\n        if (!response.ok) {\n            throw new ApiError(response.status, \"Analysis API error! status: \".concat(response.status));\n        }\n        return await response.json();\n    } catch (error) {\n        clearTimeout(timeoutId); // Clear timeout on error\n        if (error instanceof Error && error.name === \"AbortError\") {\n            throw new Error(\"Analysis API request timed out after 5 seconds\");\n        }\n        console.error(\"Error calling local analysis API:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/api.ts\n"));

/***/ })

});